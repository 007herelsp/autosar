
% --------------------------------------------------------------------------
% append

cnf(app_assoc, axiom,
  append(Xs,append(Ys,Zs)) = append(append(Xs,Ys),Zs)
).

cnf(app_comm, axiom,
  append(Xs,Ys) = append(Ys,Xs)
).

cnf(app_nil, axiom,
  append(Xs,nil) = Xs
).

% --------------------------------------------------------------------------
% push

cnf(push_nil, axiom,
  push(M,nil,nil)
).

cnf(push_app, axiom,
  ~push(M,P1,Q1) | ~push(M,P2,Q2) | push(M,append(P1,P2),append(Q1,Q2))
).

% --------------------------------------------------------------------------
% transitions

cnf(trans_say, axiom,
  ~r(append(say(M,Then),Rest)) | ~push(M,Rest,Rest2) | r(append(Then,Rest2))
).

cnf(trans_step, axiom,
  ~r(append(step(What,Then),Rest)) | r(append(Then,Rest))
).

% --------------------------------------------------------------------------
% process definitions

cnf(acquire_free, axiom,
  push(acquire,free,taken)
).

cnf(release_taken, axiom,
  push(release,taken,free)
).

cnf(worker, axiom,
  worker(W) = say(acquire,step(W,say(release,worker(W))))
).

cnf(push_step, axiom,
  push(M,step(W,Then),step(W,Then))
).

cnf(push_say, axiom,
  push(M,say(X,Then),say(X,Then))
).

% --------------------------------------------------------------------------
% initial state

cnf(initial_state, axiom,
  r(append(worker(a),append(worker(b),free)))
).

% --------------------------------------------------------------------------
% final state

fof(fraga, conjecture,
  ?[Then1,Then2,Rest] :
    r(append(step(a,Then1),append(step(b,Then2),Rest)))
).

% --------------------------------------------------------------------------

