Core AUTOSAR Software Components as a simple calculus
=====================================================

Johan Nordlander, Sept 2014


Purpose
-------
- To clarify the semantics of AUTOSAR SWCs without some of the detail inherent in a
  simulator implementation.
- To serve as a starting-point for a simulator implementation.
- To obtain a light-weight framework for further experiments in AUTOSAR formalization.


Approach
--------
- A simple process calculus with broadcast communication in the style of CBS (good
  match with AUTOSAR’s frequent use of publish-subscribe patterns).
- Static scoping and process structure (following AUTOSAR).
- Currently limited to a flat process hierarchy (any AUTOSAR component hierarchy can
  be transformed into a flat one).


Names
-----
- Identify component instances, runnables, ports, data elements, server operations, ...
- AUTOSAR guarantees:
  * component instance names I are globally unique
  * runnables R & ports P are unique within an instance
  * elements E & operations O are unique within a port
  * etc
- Leads to hierarchical names:
  I.P (ports)   I.P.E (data elements)  I.P.O (server ops)
  I.R (runnables)   I.S (inter-runnable vars)   I.X (exclusive areas)
- The union of all names is ranged over by A, B and C


Process terms
-------------
Grammar:

    P, Q    ::=     Atom    |    P || Q    |   0
    Atom    ::=     named atomic processes (to follow)

Labelled reduction:
    P  --e-->  P'

Labels:
    E, F    ::=     A?L   |   A!L   |   delta(T)
    L       ::=     label payload (to follow)

-- read "?" as "listen", "!" as "send", "delta(T)" as "T seconds passed"

Atomic processes
----------------
runnable(I.R, Time, Act, N)     Common state for runnable R of
                                component I, showing: N current
                                instances, Time seconds since last
                                activation, and activation state Act

server-runnable...

rinst(I.R, C, XS, Code)         An instance of runnable R within
                                component I, currently executing
                                Code and owning exclusive area set
                                XS, possibly on behalf of client C

excl(I.X, Bool)                 Exclusive area X of component
                                instance I, with current busy state

irv(I.S, Value)                 Inter-runnable variable S of
                                component I, with a current Value

qelem(I.P.E, N, Values)         Queued data element of size
                                N holding a sequence of Values

delem(I.P.E, Upd, Value)        Data element holding a single
                                Value with an update flag Upd

opres(I.P.O, Values)            Client-side operation buffer,
                                holding a sequence of result Values

timer(I.R, Time)                Timer for runnable I.R with Time
                                seconds left


Parallelism & broadcast
-----------------------

Parallel reduction:

            P --E-->  P’        Q --F-->  Q'
            --------------------------------
                P || Q --E*F-->  P' || Q'

where * is a partial label combinator:

            A?L  * A!L      = A!L
            A!L  * A?L      = A!L
            A?L1 * A?L2     = A?(max(L1,L2))
        delta(T) * delta(T) = delta(T)

Or in words: P||Q proceeds only if both P and Q proceed and
* they agree on the name A of the label and at most one of them sends (!)
* or they both take the same time step delta(T)

Cleanup:

        0 || P  --delta(0)-->  P       P || 0  --delta(0)-->  P


The code of a runnable
----------------------

Code    ::=     rte_send       (P,E,V,Cont)   Send to   a QElem
         |      rte_receive    (P,E,  Cont)   Read from a QElem
         |      rte_write      (P,E,V,Cont)   Write to      a DElem
         |      rte_read       (P,E,  Cont)   Read from     a DElem
         |      rte_is_updated (P,E,  Cont)   Check flag of a DElem
         |      rte_invalidate (P,E,  Cont)   Empty         a DElem
         |      rte_call       (P,O,V,Cont)   Invoke a server runnable
         |      rte_result     (P,O,  Cont)   Fetch result of previous rte_call
         |      rte_irv_write  (S,V,  Cont)   Write to  an Irv
         |      rte_irv_read   (S,V,  Cont)   Read from an Irv
         |      rte_enter      (X,    Cont)   Acquire an exclusive token
         |      rte_exit       (X,    Cont)   Return  an exclusive token
         |      rte_terminate  (V)            Terminate

Cont    ::=     functions of type "Std_ReturnType -> Code"
  where Std_ReturnType = Either Value Error

Values & results
----------------
- Values v range over standard C values (including arrays, structs and unions).
- RTE calls return values of type Std_ReturnType, which is the
  disjoint union of proper values and a set of error tokens.
- A code continuation (ranged over by Cont) is a function from Std_ReturnType to Code
- Time...


Runnable attributes
-------------------
- Dynamic semantics is defined relative to the static info in a given AUTOSAR
  system model (see ARText.hs for abstract syntax).
- Most relevant static info is a set of attributes for each runnable, with
  names like events, canBeInvokedConcurrently, minimumStartInterval, etc.
- Static attribute attr of runnable i.r is here referred to as attr(i.r).

There are two kinds of runnables: Server runnables and Regular
runnables (TODO: check if terminology clashes).  A runnable is a
Server iff it has the static attribute op_invoked_event. Otherwise it
is Regular.

- An activation state Act for a Server runnable is of the form
  serving(Clients,Args), where Clients and Args are sequences of the
  same length.
- The activation state for a Regular runnable toggles between idle and
  pending.
- The initial Act value for a Server is serving([],[])
- The initial Act value for a Regular runnable is idle


Port interconnections
---------------------
- Also part of the static AUTOSAR model info.
- Captured as a relation => between names:
  - i.p => i'.p' iff the model connects port p of component i to port
    p' of component i'
  - Lifted to i.p.e => i'.p'.e for all elements e of connected
    sender-receiver ports i.p and i'.p'.
  - Ditto for all operations of client-server ports.
  - Ditto for all port delegations of the (root) component composition.
- Generic rule for following interconnections:

    P  --B?L-->  P'
    ---------------         if A => B
    P  --A?L-->  P'


Reduction axioms
----------------
- Constitute the core of the dynamic semantics.
- Appear in matching groups that define the ways of saying as well as
  hearing a particular broadcast payload.
- A separate set of axioms define how atomic terms react to the passage
  of time (label delta(T)).
- The balance between time-steps and proper work is not fixed here
  ("speed-agnosticism").


Initial semantic state
----------------------
A parallel composition of:
- For each component prototype of the (top-level) composition:
  - One excl term for each exclusive area.
  - One runnable term for each runnable.
  - One irv term for each inter-runnable variable.
  - For each _required_ sender-receiver port:
    - one qelem term for each QueuedComSpec element.
    - one delem term for each UnQueuedComSpec element.
  - For each _required_ client-server port:
    - One opres term for each operation.
    - One timer term for each Timing event of each runnable.

Miscellaneous
-------------
- Sequences (always flat) are written using : for both left and right
  concatenation.


Exclusive areas
---------------

rinst(I.R, C, XS, rte_enter(X,Cont))    --I.X!enter()-->    rinst(I.R, C, X:XS, Cont(ok))

excl(I.X, true)                         --I.X?enter()-->    excl(I.X, false)

rinst(I.R, C, X:XS, rte_exit(X,Cont))   --I.X!exit()-->     rinst(I.R, C, XS, Cont(ok))

excl(I.X, false)                        --I.X?exit()-->     excl(I.X, true)


Inter-runnable variables
------------------------

rinst(I.R, C, XS, rte_irv_read(S,Cont))     --I.S!irvr(V)-->    rinst(I.R, C, XS, Cont(V))

irv(I.S, V)                                 --I.S?irvr(V)-->    irv(I.S, V)

rinst(I.R, C, XS, rte_irv_write(S, Cont))   --I.S!irvw(V)-->    rinst(I.R, C, XS, Cont(ok))

irv(I.S, _)                                 --I.S?irvw(V)-->    irv(I.S, V)


Sending/receiving
-----------------

rinst(I.R, C, XS, rte_receive(P,E,Cont))    --I.P.E!rcv(V)-->           rinst(I.R, C, XS, Cont(v))

qelem(I.P.E, N, V:VS)                       --I.P.E?rcv(V)-->           qelem(I.P.E, N, VS)

qelem(I.P.E, N, [])                         --I.P.E?rcv(no_data)-->     qelem(I.P.E, N, [])

rinst(I.R, C, XS, rte_send(P,E,V,Cont))     --I.P.E!snd(V,Res)-->       rinst(I.R, C, XS, Cont(Res))

qelem(I.P.E, N, VS)                         --I.P.E?snd(V,ok)-->        qelem(I.P.E, N, VS:V)
                                                                        if |VS| < N

qelem(I.P.E, N, VS)                         --I.P.E?snd(V,limit)-->     qelem(I.P.E, N, VS)
                                                                        if |VS| = N

-- This is a "Regular" runnable (not a Server)
runnable(I.R, T, _, N)                      --I.P.E?snd(V,ok)-->        runnable(I.R, T, pending, N)

runnable(I.R, T, Act, N)                    --I.P.E?snd(V,limit)-->     runnable(I.R, T, Act, N)
                                                                        if data_received(P.E) in events(I.R)


Reading/writing
---------------

rinst(I.R, C, XS, rte_read(P,E,Cont))           --I.P.E!rd(V)-->    rinst(I.R, C, XS, Cont(V))

delem(I.P.E, U, V)                              --I.P.E?rd(V)-->    delem(I.P.E, false, V)

rinst(I.R, C, XS, rte_write(P,E,V,Cont))        --I.P.E!wr(V)-->    rinst(I.R, C, XS, Cont(ok))

delem(I.P.E, V, _)                              --I.P.E?wr(V)-->    delem(I.P.E, true, V)

runnable(I.R, T, _, N)                          --I.P.E?wr(V)-->    runnable(I.R, T, pending, N)
                                                                    if DataReceived(P.E) in events(I.R)

rinst(I.R, C, XS, rte_is_updated(P,E,Cont))     --I.P.E!up(U)-->    rinst(I.R, C, XS, Cont(U))

delem(I.P.E, U, V)                              --I.P.E?up(U)-->    delem(I.P.E, U, V)

rinst(I.R, C, XS, rte_invalidate(P,E,Cont))     --I.P.E!inv()-->    rinst(I.R, C, XS, Cont(ok))

delem(I.P.E, U, _)                              --I.P.E?inv()-->    delem(I.P.E, true, invalid)


Calling a server
----------------

rinst(I.R, C, XS, rte_call(P,O,V,Cont))     --I.P.O!call(V,I.P.O,Res)-->    rinst(I.R, C, XS, Cont(Res))
                                                                            if async(P.O) in server_call_points(I.R)
                                                                            or Res /= OK

rinst(I.R, C, XS, rte_call(P,O,V,Cont))     --I.P.O!call(V,I.P.O,ok)-->     rinst(I.R, C, XS, rte_result(P,O,Cont))
                                                                            if sync(P.O) in server_call_points(I.R)

runnable(I.R, T, serving(CS,Vs), N)         --I.P.O?call(V,C,ok)-->         runnable(I.R, T, serving(Cs:C,Vs:V), N)
                                                                            if op_invoked(P.O) in events(I.R)
                                                                            and C not in Clients

runnable(I.R, T, serving(Cs,Vs), N)         --I.P.O?call(V,C,limit)-->      runnable(I.R, T, serving(Cs,Vs), N)
                                                                            if C in Clients


Obtaining a server result
-------------------------

rinst(I.R, C, XS, rte_result(P,O,Cont))     --I.P.O!res(V)-->           rinst(I.R, C, XS, Cont(V))

opres(I.P.O, V:Vs)                          --I.P.O?res(V)-->           opres(I.P.O, vs)

opres(I.P.O, [])                            --I.P.O?res(no_data)-->     opres(I.P.O, [])

rinst(A, I.P.O, [], rte_terminate(V))       --I.P.O!ret(V)-->           rinst(A, ., [], rte_terminate(void))

opres(I.P.O, Vs)                            --I.P.O?ret(V)-->           opres(I.P.O, Vs:V)


Spawning and terminating
------------------------

rinst(A, ., [], rte_terminate(V))        --A!term()-->  0

runnable(A, T, Act, N)                   --A?term()-->  runnable(A, T, Act, N-1)

runnable(A, 0, pending, N)               --A!new()-->   runnable(A, T, idle, N+1) || rinst(A, ., [], Cont(void))
                                                        if N = 0 or can_be_invoked_concurrently(A), where
                                                        T = minimum_start_interval(A) and Cont = implementation(A)

runnable(A, 0, serving(C:Cs,V:Vs), N)    --A!new()-->   runnable(A, T, serving(Cs,Vs), N+1) || rinst(A, C, [], Cont(V))
                                                        if N = 0 or can_be_invoked_concurrently(A), where
                                                        T = minimum_start_interval(A) and Cont = implementation(A)


Passing time
------------

timer(A, 0)             --A!tick()-->   timer(A, T)                 if timing(T) in events(A)

runnable(A, T, _, N)    --A?tick()-->   runnable(A, T, pending, N)

runnable(A, T, Act, N)  --delta(V)-->   runnable(A, T-V, Act, N)    if T >= V

timer(A, T)             --delta(V)-->   timer(A, T-V)               if T >= V

rinst(A, XS, Code)      --delta(V)-->   rinst(A, XS, Code)
excl(A, V)              --delta(V)-->   excl(A, V)
irv(A, V)               --delta(V)-->   irv(A, V)
qelem(A, N, vs)         --delta(V)-->   qelem(A, N, Vs)
delem(A, U, v)          --delta(V)-->   delem(A, U, V)
opres(A, Vs)            --delta(V)-->   opres(A, Vs)


Ignoring a broadcast
--------------------

rinst(A, XS, Code)      --B?L-->    rinst(A, XS, Code)
timer(A, T)             --B?L-->    timer(A, T)

runnable(A, T, Act, N)  --B?L-->    runnable(A, T, Act, N)      if A /= B and A /=> B
excl(A, V)              --B?L-->    excl(A, V)                  if A /= B and A /=> B
irv(A, V)               --B?L-->    irv(A, V)                   if A /= B and A /=> B
qelem(A, N, Vs)         --B?L-->    qelem(A, N, Vs)             if A /= B and A /=> B
opres(A, Vs)            --B?L-->    opres(A, Vs)                if A /= B and A /=> B
