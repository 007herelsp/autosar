% -*- mode: Prolog -*-
% Copyright (c) 2014-2016, Johan Nordlander, Jonas Duregård, Michał Pałka,
%                          Patrik Jansson and Josef Svenningsson
% All rights reserved.
%
% Redistribution and use in source and binary forms, with or without
% modification, are permitted provided that the following conditions are met:
%
%    * Redistributions of source code must retain the above copyright notice,
%      this list of conditions and the following disclaimer.
%    * Redistributions in binary form must reproduce the above copyright
%      notice, this list of conditions and the following disclaimer in the
%      documentation and/or other materials provided with the distribution.
%    * Neither the name of the Chalmers University of Technology nor the names of its
%      contributors may be used to endorse or promote products derived from this
%      software without specific prior written permission.
%
% THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
% AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
% IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
% DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
% FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
% DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
% SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
% CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
% OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
% OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

%%%%% Combining reductions
begingroup(CombRed).

step( par(P_1,Q_1), say(A,D),  par(P_2,Q_2) ) :- step( P_1, say(A,D),  P_2 ), step( Q_1, hear(A,D), Q_2 ).
step( par(P_1,Q_1), say(A,D),  par(P_2,Q_2) ) :- step( P_1, hear(A,D), P_2 ), step( Q_1, say(A,D),  Q_2 ).
step( par(P_1,Q_1), hear(A,D), par(P_2,Q_2) ) :- step( P_1, hear(A,D), P_2 ), step( Q_1, hear(A,D), Q_2 ).
step( par(P_1,Q_1), delta(T),  par(P_2,Q_2) ) :- step( P_1, delta(T),  P_2 ), step( Q_1, delta(T),  Q_2 ).

endgroup(CombRed).

%%%%% Inter-runnable variables

begingroup(InterrunnableVariables).

step( rinst(r(R,I), C, Xs, rte_IrvRead(S,K)),            say(s(S,I),irvr(V)),           rinst(r(R,I), C, Xs, ap(K,V))          ).
step( irv(s(S,I), V),                                    hear(s(S,I),irvr(V)),          irv(s(S,I), V)                         ).

step( rinst(r(R,I), C, Xs, rte_IrvWrite(S,V,K)),         say(s(S,I),irvw(V)),           rinst(r(R,I), C, Xs, ap(K,void))       ).
step( irv(s(S,I), _),                                    hear(s(S,I),irvw(V)),          irv(s(S,I), V)                         ).

endgroup(InterrunnableVariables).

%%%%% Exclusive areas
begingroup(ExclusiveAreas).

% Strict stack-based locking enforced: reduction gets stuck otherwise
%   (TODO: comment about flagging error on attempted "bad" rte_Exit?)

step( rinst(r(R,I), C, Xs, rte_Enter(X,K)),              say(x(X,I),ent),             rinst(r(R,I), C, cons(X,Xs), ap(K,void)) ).
step( excl(x(X,I), false),                               hear(x(X,I),ent),            excl(x(X,I), true)                       ).

step( rinst(r(R,I), C, cons(X,Xs), rte_Exit(X,K)),       say(x(X,I),ex),              rinst(r(R,I), C, Xs, ap(K,void))         ).
step( excl(x(X,I), true),                                hear(x(X,I),ex),             excl(x(X,I), false)                      ).

endgroup(ExclusiveAreas).

%%%%% Reading/writing (unbuffered versions of rcv and snd)

begingroup(ReadingWriting).

step( rinst(r(R,I), C, Xs, rte_Read(e(E,P),K)),          say(ep(E,P,I),rd(V)),           rinst(r(R,I), C, Xs, ap(K,V))         ).
step( delem(ep(E,P,I), _, V),                            hear(ep(E,P,I),rd(V)),          delem(ep(E,P,I), false, V)            ).

step( rinst(r(R,I), C, Xs, rte_Write(e(E,P),V,K)),       say(ep(E,P,I),wr(V)),           rinst(r(R,I), C, Xs, ap(K,void))      ).
step( delem(ep(E,P,I), _, _),                            hear(A,wr(V)),                  delem(ep(E,P,I), true, V)             ) :-
    connect(A,ep(E,P,I)).
step( runnable(r(R,I), T, _, N),                         hear(A,wr(_)),                  runnable(r(R,I), T, pending, N)       ) :-
    connect(A,ep(E,P,I)),
    dataReceivedEvent(r(R,I),e(E,P)).

step( rinst(r(R,I), C, Xs, rte_IsUpdated(e(E,P),K)),     say(ep(E,P,I),up(U)),           rinst(r(R,I), C, Xs, ap(K,U))         ).
step( delem(ep(E,P,I), U, V),                            hear(ep(E,P,I),up(U)),          delem(ep(E,P,I), U, V)                ).

step( rinst(r(R,I), C, Xs, rte_Invalidate(e(E,P),K)),    say(ep(E,P,I),inv),             rinst(r(R,I), C, Xs, ap(K,void))      ).
step( delem(ep(E,P,I), _, _),                            hear(A,inv),                    delem(ep(E,P,I), true, invalid)       ) :-
    connect(A,ep(E,P,I)).

endgroup(ReadingWriting).

%%%%% Sending/receiving

begingroup(SendingReceiving).

step( rinst(r(R,I), C, Xs, rte_Receive(e(E,P),K)),       say(ep(E,P,I),rcv(V)),          rinst(r(R,I), C, Xs, ap(K,V))         ).
step( qelem(ep(E,P,I), N, cons(V,Vs)),                   hear(ep(E,P,I),rcv(V)),         qelem(ep(E,P,I), N, Vs)               ).
step( qelem(ep(E,P,I), N, eps),                          hear(ep(E,P,I),rcv(nodata)),    qelem(ep(E,P,I), N, eps)              ).

step( rinst(r(R,I), C, Xs, rte_Send(e(E,P),V,K)),        say(ep(E,P,I),snd(V,eps)),      rinst(r(R,I), C, Xs, ap(K,ok))        ).
step( rinst(r(R,I), C, Xs, rte_Send(e(E,P),V,K)),        say(ep(E,P,I),snd(V,As)),       rinst(r(R,I), C, Xs, ap(K,limit))     ) :-
    notequal(As,eps),
    connect(ep(R,P,I),As).
step( qelem(ep(E,P,I), N, Vs),                           hear(A,snd(V,As)),              qelem(ep(E,P,I), N, seq(Vs,V))        ) :-
    connect(A,ep(E,P,I)), 
    less(length(Vs),N), 
    notmember(ep(E,P,I),As).
step( qelem(ep(E,P,I), N, Vs),                           hear(A,snd(_,As)),              qelem(ep(E,P,I), N, Vs)               ) :-
    connect(A,ep(E,P,I)), 
    equal(length(Vs),N), 
    member(ep(E,P,I),As).
step( runnable(r(R,I), T, _, N),                         hear(A,snd(_,As)),              runnable(r(R,I), T, pending, N)       ) :-
    connect(A,ep(E,P,I)),
    dataReceivedEvent(r(R,I),e(E,P)),
    notmember(ep(E,P,I),As).
step( runnable(r(R,I), T, Act, N),                       hear(A,snd(_,As)),              runnable(r(R,I), T, Act, N)           ) :-
    connect(A,ep(E,P,I)),
    dataReceivedEvent(r(R,I),e(E,P)),
    member(ep(E,P,I),As).

endgroup(SendingReceiving).

%%%%% Calling a server

begingroup(CallServer).

step( rinst(r(R,I), C, Xs, rte_Call(o(O,P),V,K)),   say(op(O,P,I),call(_,V)),           rinst(r(R,I), C, Xs, rte_Result(o(O,P),K))    ) :-
    synchronousServerCallPoint(r(R,I),o(O,P)).
step( rinst(r(R,I), C, Xs, rte_Call(o(O,P),V,K)),   say(op(O,P,I),call(_,V)),           rinst(r(R,I), C, Xs, ap(K,ok))                ) :-
    asynchronousServerCallPoint(r(R,I),o(O,P)).
step( oper(op(O,P,I), M, done(_)),                  hear(op(O,P,I),call(M,V)),          oper(op(O,P,I), M, calling(T))                ) :-
    serverCallPointTimeout(op(O,P,I),T).
step( runnable(r(R,I), T, Cs, N),                   hear(A,call(M,V)),                  runnable(r(R,I), T, seq(Cs,client(A,M,V)), N) ) :-
    operationInvokedEvent(r(R,I),o(O,P)),
    connect(op(O,P,I),A).

step( rinst(r(R,I), C, Xs, rte_Call(o(O,P),V,K)),   say(op(O,P,I),busy),                rinst(r(R,I), C, Xs, ap(K,limit))             ).
step( oper(op(O,P,I), M, calling(T)),               hear(op(O,P,I),busy),               oper(op(O,P,I), M, calling(T))                ).
step( runnable(r(R,I), T, Cs, N),                   hear(A,busy),                       runnable(r(R,I), T, Cs, N)                    ).

endgroup(CallServer).

%%%%% Returning a server result

begingroup(ServerResult).

step( rinst(r(R,I), C, Xs, rte_Result(o(O,P),K)),   say(op(O,P,I),res(V)),              rinst(r(R,I), C, Xs, ap(K,V))                 ) :-
    synchronousServerCallPoint(r(R,I),o(O,P)),
    notequal(V,nodata).
step( rinst(r(R,I), C, Xs, rte_Result(o(O,P),K)),   say(op(O,P,I),res(V)),              rinst(r(R,I), C, Xs, ap(K,V))                 ) :-
    asynchronousServerCallPoint(r(R,I),o(O,P)).

step( oper(op(O,P,I), M, calling(T)),               hear(op(O,P,I),res(nodata)),        oper(op(O,P,I), M, calling(T))                ).
step( oper(op(O,P,I), M, done(V)),                  hear(op(O,P,I),res(V)),             oper(op(O,P,I), M, done(V))                   ).

step( rinst(A, client(B,M,_), Xs, return(V)),       say(B,ret(M,V)),                    rinst(A, void, Xs, return(void))              ).

step( oper(op(O,P,I), M, calling(_)),               hear(op(O,P,I),ret(M,V)),           oper(op(O,P,I), plus(M,1), done(V))           ).
step( oper(op(O,P,I), M, calling(0)),               say(op(O,P,I),ret(M,timeout)),      oper(op(O,P,I), plus(M,1), done(timeout))     ).

step( runnable(r(R,I), T, _, N),                    hear(op(O,P,I),ret(_,_)),           runnable(r(R,I), T, pending, N)               ) :-
    asynchronousServerCallReturnsEvent(r(R,I),o(O,P)).

step( rinst(A, client(B,M,_), Xs, return(_)),       say(B,skip(M)),                     rinst(A, void, Xs, return(void))              ).
step( oper(op(O,P,I), M, Srv),                      hear(op(O,P,I),skip(N)),            oper(op(O,P,I), M, Srv)                       ) :- 
    notequal(M,N).
step( runnable(r(R,I), T, Act, N),                  hear(op(O,P,I),skip(_)),            runnable(r(R,I), T, Act, N)                   ).

endgroup(ServerResult).

%%%%% Spawning and terminating

begingroup(SpawnTerminate).

step( runnable(A, 0, pending, N),                   say(A,new),                         par( runnable(A, T, idle, plus(N,1)),
                                                                                              rinst(A, void, eps, ap(K,void)) )       ) :-
    or(equal(N,0),canBeInvokedConcurrently(A,N)),
    minimumStartInterval(A,T),
    implementation(A,K).
step( runnable(A, 0, cons(client(B,M,V),Cs), N),    say(A,new),                         par( runnable(A, T, Cs, plus(N,1)),
                                                                                             rinst(A, client(B,M,V), eps, ap(K,V)) )  ) :-
    or(equal(N,0),canBeInvokedConcurrently(A,N)),
    minimumStartInterval(A,T),
    implementation(A,K).

step( rinst(A, void, eps, return(_)),               say(A,term),                        zero                                         ).
step( runnable(A, T, Act, N),                       hear(A,term),                       runnable(A, T, Act, minus(N,1))              ).

endgroup(SpawnTerminate).

%%%%% Passing time

begingroup(PassingTime).

% The "time left" state V is always decreasing in delta(T) steps, and never negative.
step( rinst(A, C, Xs, Code),       delta(_),       rinst(A, C, Xs, Code)              ).
step( excl(A, V),                  delta(_),       excl(A, V)                         ).
step( irv(A, V),                   delta(_),       irv(A, V)                          ).
step( qelem(A, N, Vs),             delta(_),       qelem(A, N, Vs)                    ).
step( delem(A, U, V),              delta(_),       delem(A, U, V)                     ).
step( oper(A, M, done(V)),         delta(_),       oper(A, M, done(V))                ).

step( oper(A, M, calling(V)),      delta(T),       oper(A, M, calling(minus(V,T)))    ) :-   lesseq(T,V).
step( runnable(A, V, Act, N),      delta(T),       runnable(A, minus(V,T), Act, N)    ) :-   lesseq(T,V).
step( runnable(A, 0, Act, N),      delta(_),       runnable(A, 0, Act, N)             ).
step( timer(A, T_p, V),            delta(T),       timer(A, T_p, minus(V,T))          ) :-   lesseq(T,V).

step( timer(A, T_p, 0),            say(A,tick),    timer(A, T_p, T_p)                 ).
step( runnable(A, T, _, N),        hear(A,tick),   runnable(A, T, pending, N)         ).


endgroup(PassingTime).

%%%%% Ignoring broadcasts

begingroup(IgnoreBroadcast).

step( rinst(A, C, Xs, K),          hear(_,_),      rinst(A, C, Xs, K)                 ).
step( timer(B, T_p, T),            hear(_,_),      timer(B, T_p, T)                   ).
step( excl(B, V),                  hear(A,_),      excl(B, V)                         ) :-   notequal(A,B).
step( irv(B, V),                   hear(A,_),      irv(B, V)                          ) :-   notequal(A,B).
step( qelem(B, N, Vs),             hear(A,_),      qelem(B, N, Vs)                    ) :-   notequal(A,B), notconnect(A,B).
step( delem(B, U, V),              hear(A,_),      delem(B, U, V)                     ) :-   notequal(A,B), notconnect(A,B).
step( oper(B, M, Srv),             hear(A,_),      oper(B, M, Srv)                    ) :-   notequal(A,B).
step( runnable(r(R,I), T, Act, N), hear(A,_),      runnable(r(R,I), T, Act, N)        ) :-   
    notequal(A,B), 
    not(and(connect(A,ep(E,P,I)),dataReceivedEvent(r(R,I),e(E,P)))),
    not(and(operationInvokedEvent(r(R,I),o(O,P)),connect(op(O,P,I),A))),
    not(asynchronousServerCallReturnsEvent(r(R,I),A)).

endgroup(IgnoreBroadcast).
